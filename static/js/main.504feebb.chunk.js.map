{"version":3,"sources":["TOC.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["TOC","contents","q_list","forEach","item","push","to","pathname","id","title","className","Content","App","exact","strict","path","render","match","content","find","Number","params","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQA0BeA,MAtBf,YAA0B,IAAZC,EAAW,EAAXA,SAENC,EAAS,GAQb,OANAD,EAASE,SAAQ,SAACC,GACdF,EAAOG,KACH,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAUH,EAAKI,KAAMJ,EAAKK,WAKzC,yBAAKC,UAAU,OACX,gCACI,oCAEJ,6BACKR,KCVFS,MARf,YAA2B,IAATF,EAAQ,EAARA,MACd,OACI,6BACI,4BAAKA,KCwBFG,MAxBf,WAEI,IAAMX,EAAW,CACb,CAACO,GAAI,EAAGC,MAAO,sEACf,CAACD,GAAI,EAAGC,MAAO,sHACf,CAACD,GAAI,EAAGC,MAAO,mIAGnB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOI,OAAK,EAACC,QAAM,EAACC,KAAK,OAClBC,OAAQ,YAAc,IAAZC,EAAW,EAAXA,MACAC,EAAUjB,EAASkB,MAAK,SAAAf,GAC1B,OAAOA,EAAKI,KAAOY,OAAOH,EAAMI,OAAOb,OAE3C,OAAO,kBAAC,EAAD,CAASC,MAAOS,EAAQT,WAE1C,kBAAC,IAAD,CAAOO,OAAQ,kBAAM,kBAAC,EAAD,CAAKf,SAAUA,UCXhCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.504feebb.chunk.js","sourcesContent":["import React from \"react\";\nimport './TOC.css';\nimport {Link} from \"react-router-dom\";\n\nfunction TOC({contents}) {\n\n    let q_list = [];\n\n    contents.forEach((item) => {\n        q_list.push(\n            <Link to={{pathname: item.id}}>{item.title}</Link>\n        )\n    });\n\n    return (\n        <div className=\"TOC\">\n            <header>\n                <h2>FAQ</h2>\n            </header>\n            <nav>\n                {q_list}\n            </nav>\n        </div>\n    )\n}\n\nexport default TOC;","import React from \"react\";\n\nfunction Content({title}) {\n    return (\n        <div>\n            <h2>{title}</h2>\n        </div>\n    )\n}\n\nexport default Content;","import React from 'react';\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport TOC from \"./TOC\";\nimport Content from \"./Content\";\n\nfunction App() {\n\n    const contents = [\n        {id: 1, title: \"防水機能はありますか。\"},\n        {id: 2, title: \"充電時間と使用時間はどれくらいですか。\"},\n        {id: 3, title: \"着用は必ず右側にしなければならないですか。\"}\n    ];\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact strict path=\"/:id\"\n                       render={({match}) => {\n                           const content = contents.find(item => {\n                               return item.id === Number(match.params.id)\n                           });\n                           return <Content title={content.title}/>\n                       }}/>\n                <Route render={() => <TOC contents={contents}/>}/>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}